openapi: 3.0.0
info:
  title: Shoe Store API
  description: API documentation for a shoe store application
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server
paths:
  /products:
    get:
      summary: Get all products
      responses:
        '200':
          description: A list of products
    post:
      summary: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
              required:
                - name
                - price
      responses:
        '201':
          description: Created successfully
  /products/{id}:
    get:
      summary: Get a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product found
        '404':
          description: Product not found
    put:
      summary: Update a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
              required:
                - name
                - price
      responses:
        '200':
          description: Updated successfully
        '404':
          description: Product not found
    delete:
      summary: Delete a product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted successfully
        '404':
          description: Product not found
  /orders:
    get:
      summary: Get all orders
      responses:
        '200':
          description: A list of orders
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                      quantity:
                        type: integer
              required:
                - userId
                - products
      responses:
        '201':
          description: Created successfully
  /orders/{id}:
    get:
      summary: Get an order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order found
        '404':
          description: Order not found
    put:
      summary: Update an order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                      quantity:
                        type: integer
              required:
                - userId
                - products
      responses:
        '200':
          description: Updated successfully
        '404':
          description: Order not found
    delete:
      summary: Delete an order by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted successfully
        '404':
          description: Order not found
  /users/login:
    post:
      tags:
        - "auth"
      summary: "Login"
      description: "Authenticate user and return JWT token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "example_user"
                password:
                  type: string
                  example: "example_password"
      responses:
        200:
          description: "Successful login"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: "Invalid credentials"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid username or password"
        500:
          description: "Internal server error"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User registered successfully
  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User found
        '404':
          description: User not found
    put:
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
      responses:
        '200':
          description: Updated successfully
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted successfully
        '404':
          description: User not found
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
          format: int64
        category:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        order_number:
          type: string
        user_id:
          type: integer
          format: int64
        total_amount:
          type: number
          format: float
        order_status:
          type: string
        order_date:
          type: string
          format: date-time
        delivery_date:
          type: string
          format: date-time
        shipping_address:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        order_id:
          type: integer
          format: int64
        product_id:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int64
        unit_price:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
        full_name:
          type: string
        age:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time